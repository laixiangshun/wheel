/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Main extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3204271185857428510L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Main\",\"namespace\":\"com.zliu.schema\",\"fields\":[{\"name\":\"temp\",\"type\":\"double\"},{\"name\":\"pressure\",\"type\":\"double\"},{\"name\":\"humidity\",\"type\":\"double\"},{\"name\":\"temp_min\",\"type\":\"double\"},{\"name\":\"temp_max\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double temp;
  @Deprecated public double pressure;
  @Deprecated public double humidity;
  @Deprecated public double temp_min;
  @Deprecated public double temp_max;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Main() {}

  /**
   * All-args constructor.
   * @param temp The new value for temp
   * @param pressure The new value for pressure
   * @param humidity The new value for humidity
   * @param temp_min The new value for temp_min
   * @param temp_max The new value for temp_max
   */
  public Main(Double temp, Double pressure, Double humidity, Double temp_min, Double temp_max) {
    this.temp = temp;
    this.pressure = pressure;
    this.humidity = humidity;
    this.temp_min = temp_min;
    this.temp_max = temp_max;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return temp;
    case 1: return pressure;
    case 2: return humidity;
    case 3: return temp_min;
    case 4: return temp_max;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: temp = (Double)value$; break;
    case 1: pressure = (Double)value$; break;
    case 2: humidity = (Double)value$; break;
    case 3: temp_min = (Double)value$; break;
    case 4: temp_max = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'temp' field.
   * @return The value of the 'temp' field.
   */
  public Double getTemp() {
    return temp;
  }

  /**
   * Sets the value of the 'temp' field.
   * @param value the value to set.
   */
  public void setTemp(Double value) {
    this.temp = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return The value of the 'pressure' field.
   */
  public Double getPressure() {
    return pressure;
  }

  /**
   * Sets the value of the 'pressure' field.
   * @param value the value to set.
   */
  public void setPressure(Double value) {
    this.pressure = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public Double getHumidity() {
    return humidity;
  }

  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(Double value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'temp_min' field.
   * @return The value of the 'temp_min' field.
   */
  public Double getTempMin() {
    return temp_min;
  }

  /**
   * Sets the value of the 'temp_min' field.
   * @param value the value to set.
   */
  public void setTempMin(Double value) {
    this.temp_min = value;
  }

  /**
   * Gets the value of the 'temp_max' field.
   * @return The value of the 'temp_max' field.
   */
  public Double getTempMax() {
    return temp_max;
  }

  /**
   * Sets the value of the 'temp_max' field.
   * @param value the value to set.
   */
  public void setTempMax(Double value) {
    this.temp_max = value;
  }

  /**
   * Creates a new Main RecordBuilder.
   * @return A new Main RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Main RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Main RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Main RecordBuilder by copying an existing Main instance.
   * @param other The existing instance to copy.
   * @return A new Main RecordBuilder
   */
  public static Builder newBuilder(Main other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Main instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Main>
    implements org.apache.avro.data.RecordBuilder<Main> {

    private double temp;
    private double pressure;
    private double humidity;
    private double temp_min;
    private double temp_max;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.temp)) {
        this.temp = data().deepCopy(fields()[0].schema(), other.temp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pressure)) {
        this.pressure = data().deepCopy(fields()[1].schema(), other.pressure);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.humidity)) {
        this.humidity = data().deepCopy(fields()[2].schema(), other.humidity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[3].schema(), other.temp_min);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[4].schema(), other.temp_max);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Main instance
     * @param other The existing instance to copy.
     */
    private Builder(Main other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.temp)) {
        this.temp = data().deepCopy(fields()[0].schema(), other.temp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pressure)) {
        this.pressure = data().deepCopy(fields()[1].schema(), other.pressure);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.humidity)) {
        this.humidity = data().deepCopy(fields()[2].schema(), other.humidity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[3].schema(), other.temp_min);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[4].schema(), other.temp_max);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'temp' field.
      * @return The value.
      */
    public Double getTemp() {
      return temp;
    }

    /**
      * Sets the value of the 'temp' field.
      * @param value The value of 'temp'.
      * @return This builder.
      */
    public Builder setTemp(double value) {
      validate(fields()[0], value);
      this.temp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'temp' field has been set.
      * @return True if the 'temp' field has been set, false otherwise.
      */
    public boolean hasTemp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'temp' field.
      * @return This builder.
      */
    public Builder clearTemp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * @return The value.
      */
    public Double getPressure() {
      return pressure;
    }

    /**
      * Sets the value of the 'pressure' field.
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public Builder setPressure(double value) {
      validate(fields()[1], value);
      this.pressure = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pressure' field.
      * @return This builder.
      */
    public Builder clearPressure() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public Double getHumidity() {
      return humidity;
    }

    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public Builder setHumidity(double value) {
      validate(fields()[2], value);
      this.humidity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public Builder clearHumidity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_min' field.
      * @return The value.
      */
    public Double getTempMin() {
      return temp_min;
    }

    /**
      * Sets the value of the 'temp_min' field.
      * @param value The value of 'temp_min'.
      * @return This builder.
      */
    public Builder setTempMin(double value) {
      validate(fields()[3], value);
      this.temp_min = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_min' field has been set.
      * @return True if the 'temp_min' field has been set, false otherwise.
      */
    public boolean hasTempMin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'temp_min' field.
      * @return This builder.
      */
    public Builder clearTempMin() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_max' field.
      * @return The value.
      */
    public Double getTempMax() {
      return temp_max;
    }

    /**
      * Sets the value of the 'temp_max' field.
      * @param value The value of 'temp_max'.
      * @return This builder.
      */
    public Builder setTempMax(double value) {
      validate(fields()[4], value);
      this.temp_max = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_max' field has been set.
      * @return True if the 'temp_max' field has been set, false otherwise.
      */
    public boolean hasTempMax() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'temp_max' field.
      * @return This builder.
      */
    public Builder clearTempMax() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Main build() {
      try {
        Main record = new Main();
        record.temp = fieldSetFlags()[0] ? this.temp : (Double) defaultValue(fields()[0]);
        record.pressure = fieldSetFlags()[1] ? this.pressure : (Double) defaultValue(fields()[1]);
        record.humidity = fieldSetFlags()[2] ? this.humidity : (Double) defaultValue(fields()[2]);
        record.temp_min = fieldSetFlags()[3] ? this.temp_min : (Double) defaultValue(fields()[3]);
        record.temp_max = fieldSetFlags()[4] ? this.temp_max : (Double) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
