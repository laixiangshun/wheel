/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5106485310315994756L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Weather\",\"namespace\":\"com.zliu.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"main\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"icon\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double id;
  @Deprecated public CharSequence main;
  @Deprecated public CharSequence description;
  @Deprecated public CharSequence icon;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Weather() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param main The new value for main
   * @param description The new value for description
   * @param icon The new value for icon
   */
  public Weather(Double id, CharSequence main, CharSequence description, CharSequence icon) {
    this.id = id;
    this.main = main;
    this.description = description;
    this.icon = icon;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return main;
    case 2: return description;
    case 3: return icon;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Double)value$; break;
    case 1: main = (CharSequence)value$; break;
    case 2: description = (CharSequence)value$; break;
    case 3: icon = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public Double getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Double value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'main' field.
   * @return The value of the 'main' field.
   */
  public CharSequence getMain() {
    return main;
  }

  /**
   * Sets the value of the 'main' field.
   * @param value the value to set.
   */
  public void setMain(CharSequence value) {
    this.main = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'icon' field.
   * @return The value of the 'icon' field.
   */
  public CharSequence getIcon() {
    return icon;
  }

  /**
   * Sets the value of the 'icon' field.
   * @param value the value to set.
   */
  public void setIcon(CharSequence value) {
    this.icon = value;
  }

  /**
   * Creates a new Weather RecordBuilder.
   * @return A new Weather RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Weather RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Weather instance.
   * @param other The existing instance to copy.
   * @return A new Weather RecordBuilder
   */
  public static Builder newBuilder(Weather other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Weather instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Weather>
    implements org.apache.avro.data.RecordBuilder<Weather> {

    private double id;
    private CharSequence main;
    private CharSequence description;
    private CharSequence icon;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.main)) {
        this.main = data().deepCopy(fields()[1].schema(), other.main);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.icon)) {
        this.icon = data().deepCopy(fields()[3].schema(), other.icon);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Weather instance
     * @param other The existing instance to copy.
     */
    private Builder(Weather other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.main)) {
        this.main = data().deepCopy(fields()[1].schema(), other.main);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.icon)) {
        this.icon = data().deepCopy(fields()[3].schema(), other.icon);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public Double getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(double value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'main' field.
      * @return The value.
      */
    public CharSequence getMain() {
      return main;
    }

    /**
      * Sets the value of the 'main' field.
      * @param value The value of 'main'.
      * @return This builder.
      */
    public Builder setMain(CharSequence value) {
      validate(fields()[1], value);
      this.main = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'main' field has been set.
      * @return True if the 'main' field has been set, false otherwise.
      */
    public boolean hasMain() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'main' field.
      * @return This builder.
      */
    public Builder clearMain() {
      main = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public Builder setDescription(CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'icon' field.
      * @return The value.
      */
    public CharSequence getIcon() {
      return icon;
    }

    /**
      * Sets the value of the 'icon' field.
      * @param value The value of 'icon'.
      * @return This builder.
      */
    public Builder setIcon(CharSequence value) {
      validate(fields()[3], value);
      this.icon = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'icon' field has been set.
      * @return True if the 'icon' field has been set, false otherwise.
      */
    public boolean hasIcon() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'icon' field.
      * @return This builder.
      */
    public Builder clearIcon() {
      icon = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Weather build() {
      try {
        Weather record = new Weather();
        record.id = fieldSetFlags()[0] ? this.id : (Double) defaultValue(fields()[0]);
        record.main = fieldSetFlags()[1] ? this.main : (CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (CharSequence) defaultValue(fields()[2]);
        record.icon = fieldSetFlags()[3] ? this.icon : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
