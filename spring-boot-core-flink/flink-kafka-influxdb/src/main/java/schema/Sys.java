/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Sys extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2045016537627540661L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sys\",\"namespace\":\"com.zliu.schema\",\"fields\":[{\"name\":\"type\",\"type\":\"double\"},{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"message\",\"type\":\"double\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"sunrise\",\"type\":\"double\"},{\"name\":\"sunset\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double type;
  @Deprecated public double id;
  @Deprecated public double message;
  @Deprecated public CharSequence country;
  @Deprecated public double sunrise;
  @Deprecated public double sunset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sys() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param id The new value for id
   * @param message The new value for message
   * @param country The new value for country
   * @param sunrise The new value for sunrise
   * @param sunset The new value for sunset
   */
  public Sys(Double type, Double id, Double message, CharSequence country, Double sunrise, Double sunset) {
    this.type = type;
    this.id = id;
    this.message = message;
    this.country = country;
    this.sunrise = sunrise;
    this.sunset = sunset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return id;
    case 2: return message;
    case 3: return country;
    case 4: return sunrise;
    case 5: return sunset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (Double)value$; break;
    case 1: id = (Double)value$; break;
    case 2: message = (Double)value$; break;
    case 3: country = (CharSequence)value$; break;
    case 4: sunrise = (Double)value$; break;
    case 5: sunset = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public Double getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(Double value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public Double getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(Double value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public Double getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(Double value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'sunrise' field.
   * @return The value of the 'sunrise' field.
   */
  public Double getSunrise() {
    return sunrise;
  }

  /**
   * Sets the value of the 'sunrise' field.
   * @param value the value to set.
   */
  public void setSunrise(Double value) {
    this.sunrise = value;
  }

  /**
   * Gets the value of the 'sunset' field.
   * @return The value of the 'sunset' field.
   */
  public Double getSunset() {
    return sunset;
  }

  /**
   * Sets the value of the 'sunset' field.
   * @param value the value to set.
   */
  public void setSunset(Double value) {
    this.sunset = value;
  }

  /**
   * Creates a new Sys RecordBuilder.
   * @return A new Sys RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Sys RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sys RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Sys RecordBuilder by copying an existing Sys instance.
   * @param other The existing instance to copy.
   * @return A new Sys RecordBuilder
   */
  public static Builder newBuilder(Sys other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Sys instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sys>
    implements org.apache.avro.data.RecordBuilder<Sys> {

    private double type;
    private double id;
    private double message;
    private CharSequence country;
    private double sunrise;
    private double sunset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sunrise)) {
        this.sunrise = data().deepCopy(fields()[4].schema(), other.sunrise);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sunset)) {
        this.sunset = data().deepCopy(fields()[5].schema(), other.sunset);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Sys instance
     * @param other The existing instance to copy.
     */
    private Builder(Sys other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sunrise)) {
        this.sunrise = data().deepCopy(fields()[4].schema(), other.sunrise);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sunset)) {
        this.sunset = data().deepCopy(fields()[5].schema(), other.sunset);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public Double getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(double value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public Double getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(double value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public Double getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public Builder setMessage(double value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public Builder clearMessage() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public Builder setCountry(CharSequence value) {
      validate(fields()[3], value);
      this.country = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public Builder clearCountry() {
      country = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sunrise' field.
      * @return The value.
      */
    public Double getSunrise() {
      return sunrise;
    }

    /**
      * Sets the value of the 'sunrise' field.
      * @param value The value of 'sunrise'.
      * @return This builder.
      */
    public Builder setSunrise(double value) {
      validate(fields()[4], value);
      this.sunrise = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sunrise' field has been set.
      * @return True if the 'sunrise' field has been set, false otherwise.
      */
    public boolean hasSunrise() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sunrise' field.
      * @return This builder.
      */
    public Builder clearSunrise() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sunset' field.
      * @return The value.
      */
    public Double getSunset() {
      return sunset;
    }

    /**
      * Sets the value of the 'sunset' field.
      * @param value The value of 'sunset'.
      * @return This builder.
      */
    public Builder setSunset(double value) {
      validate(fields()[5], value);
      this.sunset = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sunset' field has been set.
      * @return True if the 'sunset' field has been set, false otherwise.
      */
    public boolean hasSunset() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sunset' field.
      * @return This builder.
      */
    public Builder clearSunset() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Sys build() {
      try {
        Sys record = new Sys();
        record.type = fieldSetFlags()[0] ? this.type : (Double) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (Double) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (Double) defaultValue(fields()[2]);
        record.country = fieldSetFlags()[3] ? this.country : (CharSequence) defaultValue(fields()[3]);
        record.sunrise = fieldSetFlags()[4] ? this.sunrise : (Double) defaultValue(fields()[4]);
        record.sunset = fieldSetFlags()[5] ? this.sunset : (Double) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
